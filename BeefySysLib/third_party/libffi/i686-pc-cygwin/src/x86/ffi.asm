; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.20617.1 

	TITLE	C:\Beefy\BeefySysLib\third_party\libffi\src\x86\ffi.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_ffi_raw_call
PUBLIC	_ffi_prep_closure_loc
PUBLIC	_ffi_prep_raw_closure_loc
PUBLIC	_ffi_call
PUBLIC	_ffi_prep_cif_machdep
PUBLIC	_ffi_prep_args
PUBLIC	_ffi_closure_SYSV_inner
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_ffi_call_win32:PROC
EXTRN	_ffi_closure_SYSV:PROC
EXTRN	_ffi_closure_raw_SYSV:PROC
EXTRN	_ffi_closure_raw_THISCALL:PROC
EXTRN	_ffi_closure_STDCALL:PROC
EXTRN	_ffi_closure_THISCALL:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__alloca_probe_16:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Odtp
_TEXT	SEGMENT
_stack$ = 8						; size = 4
_ecif$ = 12						; size = 4
_ffi_prep_args_raw PROC
; File c:\beefy\beefysyslib\third_party\libffi\src\x86\ffi.c
; Line 784
	push	ebp
	mov	ebp, esp
; Line 785
	mov	eax, DWORD PTR _ecif$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _ecif$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _stack$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 786
	pop	ebp
	ret	0
_ffi_prep_args_raw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = -16						; size = 4
_arg_area$ = -12					; size = 4
_cif$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_closure$ = 8						; size = 4
_respp$ = 12						; size = 4
_args$ = 16						; size = 4
_ffi_closure_SYSV_inner PROC
; File c:\beefy\beefysyslib\third_party\libffi\src\x86\ffi.c
; Line 487
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 492
	mov	eax, DWORD PTR _closure$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _cif$[ebp], ecx
; Line 493
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	call	__alloca_probe_16
	mov	DWORD PTR tv69[ebp], esp
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR _arg_area$[ebp], eax
; Line 501
	mov	ecx, DWORD PTR _cif$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arg_area$[ebp]
	push	edx
	mov	eax, DWORD PTR _respp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	call	_ffi_prep_incoming_args_SYSV
	add	esp, 16					; 00000010H
; Line 503
	mov	edx, DWORD PTR _closure$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _arg_area$[ebp]
	push	ecx
	mov	edx, DWORD PTR _respp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _cif$[ebp]
	push	ecx
	mov	edx, DWORD PTR _closure$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	add	esp, 16					; 00000010H
; Line 505
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [ecx+20]
; Line 506
	lea	esp, DWORD PTR [ebp-16]
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_ffi_closure_SYSV_inner ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_z$1 = -20						; size = 4
_p_argv$ = -16						; size = 4
_p_arg$ = -12						; size = 4
_i$ = -8						; size = 4
_argp$ = -4						; size = 4
_stack$ = 8						; size = 4
_rvalue$ = 12						; size = 4
_avalue$ = 16						; size = 4
_cif$ = 20						; size = 4
_ffi_prep_incoming_args_SYSV PROC
; File c:\beefy\beefysyslib\third_party\libffi\src\x86\ffi.c
; Line 512
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 518
	mov	eax, DWORD PTR _stack$[ebp]
	mov	DWORD PTR _argp$[ebp], eax
; Line 530
	mov	ecx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [ecx+20], 13			; 0000000dH
	je	SHORT $LN5@ffi_prep_i
	mov	edx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [edx+20], 18			; 00000012H
	jne	SHORT $LN6@ffi_prep_i
$LN5@ffi_prep_i:
; Line 531
	mov	eax, DWORD PTR _rvalue$[ebp]
	mov	ecx, DWORD PTR _argp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 532
	mov	eax, DWORD PTR _argp$[ebp]
	add	eax, 4
	mov	DWORD PTR _argp$[ebp], eax
$LN6@ffi_prep_i:
; Line 536
	mov	ecx, DWORD PTR _avalue$[ebp]
	mov	DWORD PTR _p_argv$[ebp], ecx
; Line 538
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _p_arg$[ebp], edx
	jmp	SHORT $LN4@ffi_prep_i
$LN3@ffi_prep_i:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _p_arg$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p_arg$[ebp], ecx
$LN4@ffi_prep_i:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN7@ffi_prep_i
; Line 543
	mov	edx, DWORD PTR _argp$[ebp]
	and	edx, 3
	je	SHORT $LN1@ffi_prep_i
; Line 544
	mov	eax, DWORD PTR _argp$[ebp]
	sub	eax, 1
	or	eax, 3
	add	eax, 1
	mov	DWORD PTR _argp$[ebp], eax
$LN1@ffi_prep_i:
; Line 559
	mov	ecx, DWORD PTR _p_arg$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _z$1[ebp], eax
; Line 563
	mov	ecx, DWORD PTR _p_argv$[ebp]
	mov	edx, DWORD PTR _argp$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 566
	mov	eax, DWORD PTR _p_argv$[ebp]
	add	eax, 4
	mov	DWORD PTR _p_argv$[ebp], eax
; Line 570
	mov	ecx, DWORD PTR _argp$[ebp]
	add	ecx, DWORD PTR _z$1[ebp]
	mov	DWORD PTR _argp$[ebp], ecx
; Line 572
	jmp	SHORT $LN3@ffi_prep_i
$LN7@ffi_prep_i:
; Line 575
	mov	esp, ebp
	pop	ebp
	ret	0
_ffi_prep_incoming_args_SYSV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_p_stack_args$ = -76					; size = 8
tv176 = -68						; size = 4
tv206 = -64						; size = 4
tv210 = -60						; size = 4
_p_stack_data$ = -56					; size = 8
_i$ = -48						; size = 4
_cabi$ = -44						; size = 4
tv130 = -40						; size = 4
_z$1 = -36						; size = 4
_p_arg$ = -32						; size = 4
_h$2 = -28						; size = 4
_p_argv$ = -24						; size = 4
_argp2$ = -20						; size = 4
_zz$3 = -16						; size = 4
_stack_args_count$ = -12				; size = 4
_argp$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_stack$ = 8						; size = 4
_ecif$ = 12						; size = 4
_ffi_prep_args PROC
; File c:\beefy\beefysyslib\third_party\libffi\src\x86\ffi.c
; Line 46
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 54
	mov	eax, DWORD PTR _stack$[ebp]
	mov	DWORD PTR _argp2$[ebp], eax
; Line 55
	mov	DWORD PTR _stack_args_count$[ebp], 0
; Line 56
	mov	ecx, DWORD PTR _ecif$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cabi$[ebp], eax
; Line 59
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	DWORD PTR _argp$[ebp], ecx
; Line 67
	mov	edx, DWORD PTR _ecif$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+20], 13			; 0000000dH
	je	SHORT $LN27@ffi_prep_a
	mov	ecx, DWORD PTR _ecif$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+20], 18			; 00000012H
	jne	SHORT $LN28@ffi_prep_a
$LN27@ffi_prep_a:
; Line 69
	mov	eax, DWORD PTR _argp$[ebp]
	mov	ecx, DWORD PTR _ecif$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
; Line 73
	cmp	DWORD PTR _cabi$[ebp], 3
	je	SHORT $LN25@ffi_prep_a
	cmp	DWORD PTR _cabi$[ebp], 4
	jne	SHORT $LN26@ffi_prep_a
$LN25@ffi_prep_a:
; Line 75
	mov	eax, DWORD PTR _stack_args_count$[ebp]
	mov	DWORD PTR _p_stack_args$[ebp+eax*4], 4
; Line 76
	mov	ecx, DWORD PTR _stack_args_count$[ebp]
	mov	edx, DWORD PTR _argp$[ebp]
	mov	DWORD PTR _p_stack_data$[ebp+ecx*4], edx
; Line 77
	mov	eax, DWORD PTR _stack_args_count$[ebp]
	add	eax, 1
	mov	DWORD PTR _stack_args_count$[ebp], eax
$LN26@ffi_prep_a:
; Line 80
	mov	ecx, DWORD PTR _argp$[ebp]
	add	ecx, 4
	mov	DWORD PTR _argp$[ebp], ecx
$LN28@ffi_prep_a:
; Line 83
	mov	edx, DWORD PTR _ecif$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _p_argv$[ebp], eax
; Line 87
	mov	ecx, DWORD PTR _ecif$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _ecif$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _p_arg$[ebp], eax
	jmp	SHORT $LN24@ffi_prep_a
$LN23@ffi_prep_a:
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _p_arg$[ebp]
	add	edx, 4
	mov	DWORD PTR _p_arg$[ebp], edx
$LN24@ffi_prep_a:
	cmp	DWORD PTR _i$[ebp], 0
	je	$LN22@ffi_prep_a
; Line 92
	mov	eax, DWORD PTR _argp$[ebp]
	and	eax, 3
	je	SHORT $LN21@ffi_prep_a
; Line 93
	mov	ecx, DWORD PTR _argp$[ebp]
	sub	ecx, 1
	or	ecx, 3
	add	ecx, 1
	mov	DWORD PTR _argp$[ebp], ecx
$LN21@ffi_prep_a:
; Line 95
	mov	edx, DWORD PTR _p_arg$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _z$1[ebp], ecx
; Line 114
	cmp	DWORD PTR _z$1[ebp], 4
	jae	$LN20@ffi_prep_a
; Line 116
	mov	DWORD PTR _z$1[ebp], 4
; Line 117
	mov	edx, DWORD PTR _p_arg$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax+6]
	mov	DWORD PTR tv130[ebp], ecx
	mov	edx, DWORD PTR tv130[ebp]
	sub	edx, 5
	mov	DWORD PTR tv130[ebp], edx
	cmp	DWORD PTR tv130[ebp], 8
	ja	SHORT $LN18@ffi_prep_a
	mov	eax, DWORD PTR tv130[ebp]
	jmp	DWORD PTR $LN31@ffi_prep_a[eax*4]
$LN17@ffi_prep_a:
; Line 120
	mov	ecx, DWORD PTR _p_argv$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _argp$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 121
	jmp	SHORT $LN18@ffi_prep_a
$LN16@ffi_prep_a:
; Line 124
	mov	edx, DWORD PTR _p_argv$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _argp$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 125
	jmp	SHORT $LN18@ffi_prep_a
$LN15@ffi_prep_a:
; Line 128
	mov	eax, DWORD PTR _p_argv$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _argp$[ebp]
	mov	DWORD PTR [eax], edx
; Line 129
	jmp	SHORT $LN18@ffi_prep_a
$LN14@ffi_prep_a:
; Line 132
	mov	ecx, DWORD PTR _p_argv$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx]
	mov	ecx, DWORD PTR _argp$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 133
	jmp	SHORT $LN18@ffi_prep_a
$LN13@ffi_prep_a:
; Line 136
	mov	edx, DWORD PTR _p_argv$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _argp$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
; Line 137
	jmp	SHORT $LN18@ffi_prep_a
$LN12@ffi_prep_a:
; Line 140
	mov	eax, DWORD PTR _p_argv$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _argp$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
; Line 141
	jmp	SHORT $LN18@ffi_prep_a
$LN11@ffi_prep_a:
; Line 144
	mov	ecx, DWORD PTR _p_argv$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _argp$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
$LN18@ffi_prep_a:
; Line 151
	jmp	SHORT $LN9@ffi_prep_a
$LN20@ffi_prep_a:
; Line 153
	mov	edx, DWORD PTR _z$1[ebp]
	push	edx
	mov	eax, DWORD PTR _p_argv$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _argp$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN9@ffi_prep_a:
; Line 161
	cmp	DWORD PTR _cabi$[ebp], 3
	jne	SHORT $LN6@ffi_prep_a
	cmp	DWORD PTR _stack_args_count$[ebp], 1
	jl	SHORT $LN7@ffi_prep_a
$LN6@ffi_prep_a:
	cmp	DWORD PTR _cabi$[ebp], 4
	jne	SHORT $LN8@ffi_prep_a
	cmp	DWORD PTR _stack_args_count$[ebp], 2
	jge	SHORT $LN8@ffi_prep_a
$LN7@ffi_prep_a:
; Line 165
	cmp	DWORD PTR _z$1[ebp], 4
	ja	SHORT $LN8@ffi_prep_a
	mov	eax, DWORD PTR _p_arg$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx+6]
	cmp	edx, 2
	je	SHORT $LN8@ffi_prep_a
	mov	eax, DWORD PTR _p_arg$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx+6]
	cmp	edx, 13					; 0000000dH
	je	SHORT $LN8@ffi_prep_a
; Line 167
	mov	eax, DWORD PTR _stack_args_count$[ebp]
	mov	ecx, DWORD PTR _z$1[ebp]
	mov	DWORD PTR _p_stack_args$[ebp+eax*4], ecx
; Line 168
	mov	edx, DWORD PTR _stack_args_count$[ebp]
	mov	eax, DWORD PTR _argp$[ebp]
	mov	DWORD PTR _p_stack_data$[ebp+edx*4], eax
; Line 169
	mov	ecx, DWORD PTR _stack_args_count$[ebp]
	add	ecx, 1
	mov	DWORD PTR _stack_args_count$[ebp], ecx
$LN8@ffi_prep_a:
; Line 173
	mov	edx, DWORD PTR _p_argv$[ebp]
	add	edx, 4
	mov	DWORD PTR _p_argv$[ebp], edx
; Line 177
	mov	eax, DWORD PTR _argp$[ebp]
	add	eax, DWORD PTR _z$1[ebp]
	mov	DWORD PTR _argp$[ebp], eax
; Line 179
	jmp	$LN23@ffi_prep_a
$LN22@ffi_prep_a:
; Line 185
	cmp	DWORD PTR _stack_args_count$[ebp], 0
	jle	$LN29@ffi_prep_a
; Line 187
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p_stack_args$[ebp+edx]
	add	eax, 3
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _zz$3[ebp], eax
; Line 191
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p_stack_data$[ebp+edx]
	cmp	eax, DWORD PTR _argp2$[ebp]
	je	SHORT $LN3@ffi_prep_a
; Line 193
	mov	eax, DWORD PTR _zz$3[ebp]
	add	eax, 1
	call	__alloca_probe_16
	mov	DWORD PTR tv176[ebp], esp
	mov	ecx, DWORD PTR tv176[ebp]
	mov	DWORD PTR _h$2[ebp], ecx
; Line 194
	mov	edx, DWORD PTR _zz$3[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p_stack_data$[ebp+ecx]
	push	edx
	mov	eax, DWORD PTR _h$2[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 196
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p_stack_data$[ebp+edx]
	sub	eax, DWORD PTR _argp2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _argp2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _argp2$[ebp]
	add	edx, DWORD PTR _zz$3[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH
; Line 197
	mov	eax, DWORD PTR _zz$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _h$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _argp2$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN3@ffi_prep_a:
; Line 200
	mov	eax, DWORD PTR _argp2$[ebp]
	add	eax, DWORD PTR _zz$3[ebp]
	mov	DWORD PTR _argp2$[ebp], eax
; Line 201
	mov	ecx, DWORD PTR _stack_args_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _stack_args_count$[ebp], ecx
; Line 202
	cmp	DWORD PTR _zz$3[ebp], 4
	jbe	SHORT $LN2@ffi_prep_a
; Line 203
	mov	DWORD PTR _stack_args_count$[ebp], 0
$LN2@ffi_prep_a:
; Line 207
	cmp	DWORD PTR _stack_args_count$[ebp], 0
	jle	$LN29@ffi_prep_a
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p_stack_data$[ebp+edx]
	cmp	eax, DWORD PTR _argp2$[ebp]
	je	$LN29@ffi_prep_a
; Line 209
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p_stack_args$[ebp+ecx]
	mov	DWORD PTR _zz$3[ebp], edx
; Line 210
	mov	eax, DWORD PTR _zz$3[ebp]
	add	eax, 3
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _zz$3[ebp], eax
; Line 211
	mov	eax, DWORD PTR _zz$3[ebp]
	add	eax, 1
	call	__alloca_probe_16
	mov	DWORD PTR tv206[ebp], esp
	mov	ecx, DWORD PTR tv206[ebp]
	mov	DWORD PTR _h$2[ebp], ecx
; Line 212
	mov	eax, DWORD PTR _zz$3[ebp]
	add	eax, 1
	call	__alloca_probe_16
	mov	DWORD PTR tv210[ebp], esp
	mov	edx, DWORD PTR tv210[ebp]
	mov	DWORD PTR _h$2[ebp], edx
; Line 213
	mov	eax, DWORD PTR _zz$3[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p_stack_data$[ebp+ecx]
	push	edx
	mov	eax, DWORD PTR _h$2[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 214
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p_stack_data$[ebp+ecx]
	sub	edx, DWORD PTR _argp2$[ebp]
	push	edx
	mov	eax, DWORD PTR _argp2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _argp2$[ebp]
	add	ecx, DWORD PTR _zz$3[ebp]
	push	ecx
	call	_memmove
	add	esp, 12					; 0000000cH
; Line 215
	mov	edx, DWORD PTR _zz$3[ebp]
	push	edx
	mov	eax, DWORD PTR _h$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _argp2$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN29@ffi_prep_a:
; Line 220
	lea	esp, DWORD PTR [ebp-76]
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN31@ffi_prep_a:
	DD	$LN16@ffi_prep_a
	DD	$LN17@ffi_prep_a
	DD	$LN14@ffi_prep_a
	DD	$LN15@ffi_prep_a
	DD	$LN12@ffi_prep_a
	DD	$LN13@ffi_prep_a
	DD	$LN18@ffi_prep_a
	DD	$LN18@ffi_prep_a
	DD	$LN11@ffi_prep_a
_ffi_prep_args ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_align$1 = -16						; size = 4
tv67 = -12						; size = 4
_i$ = -8						; size = 4
_ptr$ = -4						; size = 4
_cif$ = 8						; size = 4
_ffi_prep_cif_machdep PROC
; File c:\beefy\beefysyslib\third_party\libffi\src\x86\ffi.c
; Line 224
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 229
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movzx	edx, WORD PTR [ecx+6]
	mov	DWORD PTR tv67[ebp], edx
	cmp	DWORD PTR tv67[ebp], 13			; 0000000dH
	ja	$LN5@ffi_prep_c
	mov	eax, DWORD PTR tv67[ebp]
	movzx	ecx, BYTE PTR $LN23@ffi_prep_c[eax]
	jmp	DWORD PTR $LN24@ffi_prep_c[ecx*4]
$LN18@ffi_prep_c:
; Line 248
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+12]
	movzx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 249
	jmp	$LN19@ffi_prep_c
$LN17@ffi_prep_c:
; Line 255
	mov	eax, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [eax+20], 12			; 0000000cH
; Line 256
	jmp	$LN19@ffi_prep_c
$LN16@ffi_prep_c:
; Line 260
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx], 1
	jne	SHORT $LN15@ffi_prep_c
; Line 262
	mov	eax, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [eax+20], 15			; 0000000fH
	jmp	SHORT $LN14@ffi_prep_c
$LN15@ffi_prep_c:
; Line 264
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx], 2
	jne	SHORT $LN13@ffi_prep_c
; Line 266
	mov	eax, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [eax+20], 16			; 00000010H
	jmp	SHORT $LN14@ffi_prep_c
$LN13@ffi_prep_c:
; Line 268
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx], 4
	jne	SHORT $LN11@ffi_prep_c
; Line 273
	mov	eax, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [eax+20], 1
	jmp	SHORT $LN14@ffi_prep_c
$LN11@ffi_prep_c:
; Line 276
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx], 8
	jne	SHORT $LN9@ffi_prep_c
; Line 278
	mov	eax, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [eax+20], 12			; 0000000cH
; Line 280
	jmp	SHORT $LN14@ffi_prep_c
$LN9@ffi_prep_c:
; Line 284
	mov	ecx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [ecx], 5
	jne	SHORT $LN7@ffi_prep_c
; Line 285
	mov	edx, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [edx+20], 18			; 00000012H
; Line 286
	jmp	SHORT $LN6@ffi_prep_c
$LN7@ffi_prep_c:
; Line 288
	mov	eax, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [eax+20], 13			; 0000000dH
$LN6@ffi_prep_c:
; Line 290
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 4
	mov	eax, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [eax+16], edx
$LN14@ffi_prep_c:
; Line 292
	jmp	SHORT $LN19@ffi_prep_c
$LN5@ffi_prep_c:
; Line 301
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [ecx+20], 1
$LN19@ffi_prep_c:
; Line 306
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _ptr$[ebp], eax
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN4@ffi_prep_c
$LN3@ffi_prep_c:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _ptr$[ebp], ecx
$LN4@ffi_prep_c:
	cmp	DWORD PTR _i$[ebp], 0
	jbe	SHORT $LN2@ffi_prep_c
; Line 310
	mov	DWORD PTR _align$1[ebp], 4
; Line 312
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _cif$[ebp]
	and	ecx, DWORD PTR [edx+16]
	je	SHORT $LN1@ffi_prep_c
; Line 313
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	edx, DWORD PTR _align$1[ebp]
	sub	edx, 1
	or	ecx, edx
	add	ecx, 1
	mov	eax, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@ffi_prep_c:
; Line 314
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	sub	eax, 1
	or	eax, 3
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	lea	eax, DWORD PTR [eax+edx+1]
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 315
	jmp	SHORT $LN3@ffi_prep_c
$LN2@ffi_prep_c:
; Line 327
	xor	eax, eax
; Line 328
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN24@ffi_prep_c:
	DD	$LN18@ffi_prep_c
	DD	$LN17@ffi_prep_c
	DD	$LN16@ffi_prep_c
	DD	$LN5@ffi_prep_c
$LN23@ffi_prep_c:
	DB	0
	DB	3
	DB	0
	DB	0
	DB	3
	DB	0
	DB	0
	DB	0
	DB	0
	DB	3
	DB	3
	DB	1
	DB	0
	DB	2
_ffi_prep_cif_machdep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = -40						; size = 4
_ecif$ = -36						; size = 12
_sz$1 = -24						; size = 4
tv75 = -20						; size = 4
_abi$2 = -16						; size = 4
_i$3 = -12						; size = 4
_passed_regs$4 = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_cif$ = 8						; size = 4
_fn$ = 12						; size = 4
_rvalue$ = 16						; size = 4
_avalue$ = 20						; size = 4
_ffi_call PROC
; File c:\beefy\beefysyslib\third_party\libffi\src\x86\ffi.c
; Line 344
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 347
	mov	eax, DWORD PTR _cif$[ebp]
	mov	DWORD PTR _ecif$[ebp], eax
; Line 348
	mov	ecx, DWORD PTR _avalue$[ebp]
	mov	DWORD PTR _ecif$[ebp+8], ecx
; Line 364
	cmp	DWORD PTR _rvalue$[ebp], 0
	jne	SHORT $LN18@ffi_call
	mov	edx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [edx+20], 13			; 0000000dH
	je	SHORT $LN17@ffi_call
	mov	eax, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [eax+20], 18			; 00000012H
	jne	SHORT $LN18@ffi_call
$LN17@ffi_call:
; Line 366
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	call	__alloca_probe_16
	mov	DWORD PTR tv73[ebp], esp
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR _ecif$[ebp+4], eax
; Line 369
	jmp	SHORT $LN16@ffi_call
$LN18@ffi_call:
; Line 370
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	DWORD PTR _ecif$[ebp+4], ecx
$LN16@ffi_call:
; Line 373
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv75[ebp], eax
	mov	ecx, DWORD PTR tv75[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
	cmp	DWORD PTR tv75[ebp], 4
	ja	$LN19@ffi_call
	mov	edx, DWORD PTR tv75[ebp]
	jmp	DWORD PTR $LN21@ffi_call[edx*4]
$LN13@ffi_call:
; Line 385
	mov	eax, DWORD PTR _fn$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ecif$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR _ecif$[ebp]
	push	edx
	push	OFFSET _ffi_prep_args
	call	_ffi_call_win32
	add	esp, 28					; 0000001cH
; Line 386
	jmp	$LN19@ffi_call
$LN12@ffi_call:
; Line 390
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _abi$2[ebp], ecx
; Line 391
	mov	DWORD PTR _passed_regs$4[ebp], 0
; Line 393
	mov	edx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [edx+20], 13			; 0000000dH
	jne	SHORT $LN11@ffi_call
; Line 394
	mov	eax, DWORD PTR _passed_regs$4[ebp]
	add	eax, 1
	mov	DWORD PTR _passed_regs$4[ebp], eax
$LN11@ffi_call:
; Line 396
	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN10@ffi_call
$LN9@ffi_call:
	mov	ecx, DWORD PTR _i$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$3[ebp], ecx
$LN10@ffi_call:
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jae	SHORT $LN8@ffi_call
	cmp	DWORD PTR _passed_regs$4[ebp], 2
	jae	SHORT $LN8@ffi_call
; Line 401
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	movzx	edx, WORD PTR [ecx+6]
	cmp	edx, 2
	je	SHORT $LN6@ffi_call
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$3[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	movzx	ecx, WORD PTR [eax+6]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN7@ffi_call
$LN6@ffi_call:
; Line 402
	jmp	SHORT $LN9@ffi_call
$LN7@ffi_call:
; Line 403
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$3[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx]
	add	eax, 3
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _sz$1[ebp], eax
; Line 404
	je	SHORT $LN4@ffi_call
	cmp	DWORD PTR _sz$1[ebp], 4
	jbe	SHORT $LN5@ffi_call
$LN4@ffi_call:
; Line 405
	jmp	SHORT $LN9@ffi_call
$LN5@ffi_call:
; Line 406
	mov	ecx, DWORD PTR _passed_regs$4[ebp]
	add	ecx, 1
	mov	DWORD PTR _passed_regs$4[ebp], ecx
; Line 407
	jmp	SHORT $LN9@ffi_call
$LN8@ffi_call:
; Line 408
	cmp	DWORD PTR _passed_regs$4[ebp], 2
	jae	SHORT $LN3@ffi_call
	cmp	DWORD PTR _abi$2[ebp], 4
	jne	SHORT $LN3@ffi_call
; Line 409
	mov	DWORD PTR _abi$2[ebp], 3
$LN3@ffi_call:
; Line 410
	cmp	DWORD PTR _passed_regs$4[ebp], 1
	jae	SHORT $LN2@ffi_call
	cmp	DWORD PTR _abi$2[ebp], 3
	jne	SHORT $LN2@ffi_call
; Line 411
	mov	DWORD PTR _abi$2[ebp], 2
$LN2@ffi_call:
; Line 413
	mov	edx, DWORD PTR _fn$[ebp]
	push	edx
	mov	eax, DWORD PTR _ecif$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _abi$2[ebp]
	push	edx
	lea	eax, DWORD PTR _ecif$[ebp]
	push	eax
	push	OFFSET _ffi_prep_args
	call	_ffi_call_win32
	add	esp, 28					; 0000001cH
$LN19@ffi_call:
; Line 426
	lea	esp, DWORD PTR [ebp-40]
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN21@ffi_call:
	DD	$LN13@ffi_call
	DD	$LN13@ffi_call
	DD	$LN12@ffi_call
	DD	$LN12@ffi_call
	DD	$LN13@ffi_call
_ffi_call ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
___dis$1 = -40						; size = 4
___fun$2 = -36						; size = 4
___dis$3 = -32						; size = 4
___fun$4 = -28						; size = 4
___ctx$5 = -24						; size = 4
___ctx$6 = -20						; size = 4
_i$ = -16						; size = 4
___tramp$7 = -12					; size = 4
___tramp$8 = -8						; size = 4
___size$9 = -4						; size = 2
_closure$ = 8						; size = 4
_cif$ = 12						; size = 4
_fun$ = 16						; size = 4
_user_data$ = 20					; size = 4
_codeloc$ = 24						; size = 4
_ffi_prep_raw_closure_loc PROC
; File c:\beefy\beefysyslib\third_party\libffi\src\x86\ffi.c
; Line 740
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
; Line 743
	mov	eax, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN8@ffi_prep_r
; Line 745
	mov	ecx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [ecx], 3
	je	SHORT $LN8@ffi_prep_r
; Line 747
	mov	eax, 2
	jmp	$LN9@ffi_prep_r
$LN8@ffi_prep_r:
; Line 755
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN6@ffi_prep_r
$LN5@ffi_prep_r:
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@ffi_prep_r:
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN4@ffi_prep_r
; Line 759
	jmp	SHORT $LN5@ffi_prep_r
$LN4@ffi_prep_r:
; Line 762
	mov	edx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [edx], 1
	jne	SHORT $LN3@ffi_prep_r
; Line 766
	mov	eax, 1
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _closure$[ebp]
	mov	DWORD PTR ___tramp$7[ebp], ecx
	mov	DWORD PTR ___fun$4[ebp], OFFSET _ffi_closure_raw_SYSV
	mov	edx, DWORD PTR _codeloc$[ebp]
	mov	DWORD PTR ___ctx$6[ebp], edx
	mov	eax, DWORD PTR ___ctx$6[ebp]
	add	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR ___fun$4[ebp]
	sub	ecx, eax
	mov	DWORD PTR ___dis$3[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR ___tramp$7[ebp]
	mov	BYTE PTR [ecx+eax], 184			; 000000b8H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR ___tramp$7[ebp]
	mov	ecx, DWORD PTR ___ctx$6[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, 1
	imul	eax, edx, 5
	mov	ecx, DWORD PTR ___tramp$7[ebp]
	mov	BYTE PTR [ecx+eax], 233			; 000000e9H
	mov	edx, 1
	imul	eax, edx, 6
	mov	ecx, DWORD PTR ___tramp$7[ebp]
	mov	edx, DWORD PTR ___dis$3[ebp]
	mov	DWORD PTR [ecx+eax], edx
	jmp	$LN2@ffi_prep_r
$LN3@ffi_prep_r:
; Line 769
	mov	eax, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [eax], 3
	jne	$LN2@ffi_prep_r
; Line 772
	mov	ecx, 1
	imul	edx, ecx, 0
	add	edx, DWORD PTR _closure$[ebp]
	mov	DWORD PTR ___tramp$8[ebp], edx
	mov	DWORD PTR ___fun$2[ebp], OFFSET _ffi_closure_raw_THISCALL
	mov	eax, DWORD PTR _codeloc$[ebp]
	mov	DWORD PTR ___ctx$5[ebp], eax
	mov	ecx, DWORD PTR ___ctx$5[ebp]
	add	ecx, 49					; 00000031H
	mov	edx, DWORD PTR ___fun$2[ebp]
	sub	edx, ecx
	mov	DWORD PTR ___dis$1[ebp], edx
	mov	eax, DWORD PTR _cif$[ebp]
	mov	cx, WORD PTR [eax+16]
	mov	WORD PTR ___size$9[ebp], cx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR ___tramp$8[ebp]
	mov	DWORD PTR [ecx+eax], -2094791541	; 8324048bH
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR ___tramp$8[ebp]
	mov	DWORD PTR [eax+edx], 1284050156		; 4c890cecH
	mov	ecx, 1
	shl	ecx, 3
	mov	edx, DWORD PTR ___tramp$8[ebp]
	mov	DWORD PTR [edx+ecx], 76088356		; 04890424H
	mov	eax, 1
	imul	ecx, eax, 12
	mov	edx, DWORD PTR ___tramp$8[ebp]
	mov	BYTE PTR [edx+ecx], 36			; 00000024H
	mov	eax, 1
	imul	ecx, eax, 13
	mov	edx, DWORD PTR ___tramp$8[ebp]
	mov	BYTE PTR [edx+ecx], 184			; 000000b8H
	mov	eax, 1
	imul	ecx, eax, 14
	movzx	edx, WORD PTR ___size$9[ebp]
	mov	eax, DWORD PTR ___tramp$8[ebp]
	mov	DWORD PTR [eax+ecx], edx
	mov	ecx, 1
	imul	edx, ecx, 18
	mov	eax, DWORD PTR ___tramp$8[ebp]
	mov	DWORD PTR [eax+edx], 136596621		; 08244c8dH
	mov	ecx, 1
	imul	edx, ecx, 22
	mov	eax, DWORD PTR ___tramp$8[ebp]
	mov	DWORD PTR [eax+edx], 1208150209		; 4802e8c1H
	mov	ecx, 1
	imul	edx, ecx, 26
	mov	eax, 2932				; 00000b74H
	mov	ecx, DWORD PTR ___tramp$8[ebp]
	mov	WORD PTR [ecx+edx], ax
	mov	edx, 1
	imul	eax, edx, 28
	mov	ecx, DWORD PTR ___tramp$8[ebp]
	mov	DWORD PTR [ecx+eax], -1995943541	; 8908518bH
	mov	edx, 1
	shl	edx, 5
	mov	eax, DWORD PTR ___tramp$8[ebp]
	mov	DWORD PTR [eax+edx], 79790865		; 04c18311H
	mov	ecx, 1
	imul	edx, ecx, 36
	mov	eax, DWORD PTR ___tramp$8[ebp]
	mov	BYTE PTR [eax+edx], 72			; 00000048H
	mov	ecx, 1
	imul	edx, ecx, 37
	mov	eax, 62837				; 0000f575H
	mov	ecx, DWORD PTR ___tramp$8[ebp]
	mov	WORD PTR [ecx+edx], ax
	mov	edx, 1
	imul	eax, edx, 39
	mov	ecx, DWORD PTR ___tramp$8[ebp]
	mov	BYTE PTR [ecx+eax], 184			; 000000b8H
	mov	edx, 1
	imul	eax, edx, 40
	mov	ecx, DWORD PTR ___tramp$8[ebp]
	mov	edx, DWORD PTR ___ctx$5[ebp]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, 1
	imul	ecx, eax, 44
	mov	edx, DWORD PTR ___tramp$8[ebp]
	mov	BYTE PTR [edx+ecx], 232			; 000000e8H
	mov	eax, 1
	imul	ecx, eax, 45
	mov	edx, DWORD PTR ___tramp$8[ebp]
	mov	eax, DWORD PTR ___dis$1[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, 1
	imul	edx, ecx, 49
	mov	eax, DWORD PTR ___tramp$8[ebp]
	mov	BYTE PTR [eax+edx], 194			; 000000c2H
	movzx	ecx, WORD PTR ___size$9[ebp]
	add	ecx, 8
	mov	edx, 1
	imul	eax, edx, 50
	mov	edx, DWORD PTR ___tramp$8[ebp]
	mov	WORD PTR [edx+eax], cx
$LN2@ffi_prep_r:
; Line 775
	mov	eax, DWORD PTR _closure$[ebp]
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [eax+52], ecx
; Line 776
	mov	edx, DWORD PTR _closure$[ebp]
	mov	eax, DWORD PTR _user_data$[ebp]
	mov	DWORD PTR [edx+60], eax
; Line 777
	mov	ecx, DWORD PTR _closure$[ebp]
	mov	edx, DWORD PTR _fun$[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 779
	xor	eax, eax
$LN9@ffi_prep_r:
; Line 780
	mov	esp, ebp
	pop	ebp
	ret	0
_ffi_prep_raw_closure_loc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
___dis$1 = -72						; size = 4
___fun$2 = -68						; size = 4
___dis$3 = -64						; size = 4
___fun$4 = -60						; size = 4
___dis$5 = -56						; size = 4
___fun$6 = -52						; size = 4
___dis$7 = -48						; size = 4
___fun$8 = -44						; size = 4
___ctx$9 = -40						; size = 4
___ctx$10 = -36						; size = 4
___ctx$11 = -32						; size = 4
___ctx$12 = -28						; size = 4
___tramp$13 = -24					; size = 4
___tramp$14 = -20					; size = 4
___tramp$15 = -16					; size = 4
___tramp$16 = -12					; size = 4
___size$17 = -8						; size = 2
___size$18 = -4						; size = 2
_closure$ = 8						; size = 4
_cif$ = 12						; size = 4
_fun$ = 16						; size = 4
_user_data$ = 20					; size = 4
_codeloc$ = 24						; size = 4
_ffi_prep_closure_loc PROC
; File c:\beefy\beefysyslib\third_party\libffi\src\x86\ffi.c
; Line 677
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
; Line 690
	mov	eax, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN8@ffi_prep_c
; Line 694
	mov	ecx, 1
	imul	edx, ecx, 0
	add	edx, DWORD PTR _closure$[ebp]
	mov	DWORD PTR ___tramp$14[ebp], edx
	mov	DWORD PTR ___fun$8[ebp], OFFSET _ffi_closure_SYSV
	mov	eax, DWORD PTR _codeloc$[ebp]
	mov	DWORD PTR ___ctx$12[ebp], eax
	mov	ecx, DWORD PTR ___ctx$12[ebp]
	add	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR ___fun$8[ebp]
	sub	edx, ecx
	mov	DWORD PTR ___dis$7[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR ___tramp$14[ebp]
	mov	BYTE PTR [edx+ecx], 184			; 000000b8H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR ___tramp$14[ebp]
	mov	edx, DWORD PTR ___ctx$12[ebp]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR ___tramp$14[ebp]
	mov	BYTE PTR [edx+ecx], 233			; 000000e9H
	mov	eax, 1
	imul	ecx, eax, 6
	mov	edx, DWORD PTR ___tramp$14[ebp]
	mov	eax, DWORD PTR ___dis$7[ebp]
	mov	DWORD PTR [edx+ecx], eax
	jmp	$LN7@ffi_prep_c
$LN8@ffi_prep_c:
; Line 697
	mov	ecx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [ecx], 3
	jne	$LN6@ffi_prep_c
; Line 702
	mov	edx, 1
	imul	eax, edx, 0
	add	eax, DWORD PTR _closure$[ebp]
	mov	DWORD PTR ___tramp$16[ebp], eax
	mov	DWORD PTR ___fun$6[ebp], OFFSET _ffi_closure_THISCALL
	mov	ecx, DWORD PTR _codeloc$[ebp]
	mov	DWORD PTR ___ctx$11[ebp], ecx
	mov	edx, DWORD PTR ___ctx$11[ebp]
	add	edx, 49					; 00000031H
	mov	eax, DWORD PTR ___fun$6[ebp]
	sub	eax, edx
	mov	DWORD PTR ___dis$5[ebp], eax
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	dx, WORD PTR [ecx+16]
	mov	WORD PTR ___size$18[ebp], dx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR ___tramp$16[ebp]
	mov	DWORD PTR [edx+ecx], -2094791541	; 8324048bH
	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR ___tramp$16[ebp]
	mov	DWORD PTR [ecx+eax], 1284050156		; 4c890cecH
	mov	edx, 1
	shl	edx, 3
	mov	eax, DWORD PTR ___tramp$16[ebp]
	mov	DWORD PTR [eax+edx], 76088356		; 04890424H
	mov	ecx, 1
	imul	edx, ecx, 12
	mov	eax, DWORD PTR ___tramp$16[ebp]
	mov	BYTE PTR [eax+edx], 36			; 00000024H
	mov	ecx, 1
	imul	edx, ecx, 13
	mov	eax, DWORD PTR ___tramp$16[ebp]
	mov	BYTE PTR [eax+edx], 184			; 000000b8H
	mov	ecx, 1
	imul	edx, ecx, 14
	movzx	eax, WORD PTR ___size$18[ebp]
	mov	ecx, DWORD PTR ___tramp$16[ebp]
	mov	DWORD PTR [ecx+edx], eax
	mov	edx, 1
	imul	eax, edx, 18
	mov	ecx, DWORD PTR ___tramp$16[ebp]
	mov	DWORD PTR [ecx+eax], 136596621		; 08244c8dH
	mov	edx, 1
	imul	eax, edx, 22
	mov	ecx, DWORD PTR ___tramp$16[ebp]
	mov	DWORD PTR [ecx+eax], 1208150209		; 4802e8c1H
	mov	edx, 1
	imul	eax, edx, 26
	mov	ecx, 2932				; 00000b74H
	mov	edx, DWORD PTR ___tramp$16[ebp]
	mov	WORD PTR [edx+eax], cx
	mov	eax, 1
	imul	ecx, eax, 28
	mov	edx, DWORD PTR ___tramp$16[ebp]
	mov	DWORD PTR [edx+ecx], -1995943541	; 8908518bH
	mov	eax, 1
	shl	eax, 5
	mov	ecx, DWORD PTR ___tramp$16[ebp]
	mov	DWORD PTR [ecx+eax], 79790865		; 04c18311H
	mov	edx, 1
	imul	eax, edx, 36
	mov	ecx, DWORD PTR ___tramp$16[ebp]
	mov	BYTE PTR [ecx+eax], 72			; 00000048H
	mov	edx, 1
	imul	eax, edx, 37
	mov	ecx, 62837				; 0000f575H
	mov	edx, DWORD PTR ___tramp$16[ebp]
	mov	WORD PTR [edx+eax], cx
	mov	eax, 1
	imul	ecx, eax, 39
	mov	edx, DWORD PTR ___tramp$16[ebp]
	mov	BYTE PTR [edx+ecx], 184			; 000000b8H
	mov	eax, 1
	imul	ecx, eax, 40
	mov	edx, DWORD PTR ___tramp$16[ebp]
	mov	eax, DWORD PTR ___ctx$11[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, 1
	imul	edx, ecx, 44
	mov	eax, DWORD PTR ___tramp$16[ebp]
	mov	BYTE PTR [eax+edx], 232			; 000000e8H
	mov	ecx, 1
	imul	edx, ecx, 45
	mov	eax, DWORD PTR ___tramp$16[ebp]
	mov	ecx, DWORD PTR ___dis$5[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, 1
	imul	eax, edx, 49
	mov	ecx, DWORD PTR ___tramp$16[ebp]
	mov	BYTE PTR [ecx+eax], 194			; 000000c2H
	movzx	edx, WORD PTR ___size$18[ebp]
	add	edx, 8
	mov	eax, 1
	imul	ecx, eax, 50
	mov	eax, DWORD PTR ___tramp$16[ebp]
	mov	WORD PTR [eax+ecx], dx
	jmp	$LN7@ffi_prep_c
$LN6@ffi_prep_c:
; Line 704
	mov	ecx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [ecx], 2
	jne	$LN4@ffi_prep_c
; Line 708
	mov	edx, 1
	imul	eax, edx, 0
	add	eax, DWORD PTR _closure$[ebp]
	mov	DWORD PTR ___tramp$15[ebp], eax
	mov	DWORD PTR ___fun$4[ebp], OFFSET _ffi_closure_STDCALL
	mov	ecx, DWORD PTR _codeloc$[ebp]
	mov	DWORD PTR ___ctx$10[ebp], ecx
	mov	edx, DWORD PTR ___ctx$10[ebp]
	add	edx, 10					; 0000000aH
	mov	eax, DWORD PTR ___fun$4[ebp]
	sub	eax, edx
	mov	DWORD PTR ___dis$3[ebp], eax
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	dx, WORD PTR [ecx+16]
	mov	WORD PTR ___size$17[ebp], dx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR ___tramp$15[ebp]
	mov	BYTE PTR [edx+ecx], 184			; 000000b8H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR ___tramp$15[ebp]
	mov	edx, DWORD PTR ___ctx$10[ebp]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR ___tramp$15[ebp]
	mov	BYTE PTR [edx+ecx], 232			; 000000e8H
	mov	eax, 1
	imul	ecx, eax, 6
	mov	edx, DWORD PTR ___tramp$15[ebp]
	mov	eax, DWORD PTR ___dis$3[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, 1
	imul	edx, ecx, 10
	mov	eax, DWORD PTR ___tramp$15[ebp]
	mov	BYTE PTR [eax+edx], 194			; 000000c2H
	mov	ecx, 1
	imul	edx, ecx, 11
	mov	eax, DWORD PTR ___tramp$15[ebp]
	mov	cx, WORD PTR ___size$17[ebp]
	mov	WORD PTR [eax+edx], cx
	jmp	SHORT $LN7@ffi_prep_c
$LN4@ffi_prep_c:
; Line 710
	mov	edx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [edx], 5
	jne	SHORT $LN2@ffi_prep_c
; Line 714
	mov	eax, 1
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _closure$[ebp]
	mov	DWORD PTR ___tramp$13[ebp], ecx
	mov	DWORD PTR ___fun$2[ebp], OFFSET _ffi_closure_SYSV
	mov	edx, DWORD PTR _codeloc$[ebp]
	mov	DWORD PTR ___ctx$9[ebp], edx
	mov	eax, DWORD PTR ___ctx$9[ebp]
	add	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR ___fun$2[ebp]
	sub	ecx, eax
	mov	DWORD PTR ___dis$1[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR ___tramp$13[ebp]
	mov	BYTE PTR [ecx+eax], 184			; 000000b8H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR ___tramp$13[ebp]
	mov	ecx, DWORD PTR ___ctx$9[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, 1
	imul	eax, edx, 5
	mov	ecx, DWORD PTR ___tramp$13[ebp]
	mov	BYTE PTR [ecx+eax], 233			; 000000e9H
	mov	edx, 1
	imul	eax, edx, 6
	mov	ecx, DWORD PTR ___tramp$13[ebp]
	mov	edx, DWORD PTR ___dis$1[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 718
	jmp	SHORT $LN7@ffi_prep_c
$LN2@ffi_prep_c:
; Line 720
	mov	eax, 2
	jmp	SHORT $LN9@ffi_prep_c
$LN7@ffi_prep_c:
; Line 723
	mov	eax, DWORD PTR _closure$[ebp]
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [eax+52], ecx
; Line 724
	mov	edx, DWORD PTR _closure$[ebp]
	mov	eax, DWORD PTR _user_data$[ebp]
	mov	DWORD PTR [edx+60], eax
; Line 725
	mov	ecx, DWORD PTR _closure$[ebp]
	mov	edx, DWORD PTR _fun$[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 727
	xor	eax, eax
$LN9@ffi_prep_c:
; Line 728
	mov	esp, ebp
	pop	ebp
	ret	0
_ffi_prep_closure_loc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = -44						; size = 4
_avalue$ = -40						; size = 4
_ecif$ = -36						; size = 12
_sz$1 = -24						; size = 4
tv75 = -20						; size = 4
_i$2 = -16						; size = 4
_passed_regs$3 = -12					; size = 4
_abi$4 = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_cif$ = 8						; size = 4
_fn$ = 12						; size = 4
_rvalue$ = 16						; size = 4
_fake_avalue$ = 20					; size = 4
_ffi_raw_call PROC
; File c:\beefy\beefysyslib\third_party\libffi\src\x86\ffi.c
; Line 795
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 797
	mov	eax, DWORD PTR _fake_avalue$[ebp]
	mov	DWORD PTR _avalue$[ebp], eax
; Line 799
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	DWORD PTR _ecif$[ebp], ecx
; Line 800
	mov	edx, DWORD PTR _avalue$[ebp]
	mov	DWORD PTR _ecif$[ebp+8], edx
; Line 807
	cmp	DWORD PTR _rvalue$[ebp], 0
	jne	SHORT $LN18@ffi_raw_ca
	mov	eax, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [eax+20], 13			; 0000000dH
	je	SHORT $LN17@ffi_raw_ca
	mov	ecx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [ecx+20], 18			; 00000012H
	jne	SHORT $LN18@ffi_raw_ca
$LN17@ffi_raw_ca:
; Line 809
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	eax, DWORD PTR [eax]
	call	__alloca_probe_16
	mov	DWORD PTR tv73[ebp], esp
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR _ecif$[ebp+4], ecx
; Line 811
	jmp	SHORT $LN16@ffi_raw_ca
$LN18@ffi_raw_ca:
; Line 812
	mov	edx, DWORD PTR _rvalue$[ebp]
	mov	DWORD PTR _ecif$[ebp+4], edx
$LN16@ffi_raw_ca:
; Line 815
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv75[ebp], ecx
	mov	edx, DWORD PTR tv75[ebp]
	sub	edx, 1
	mov	DWORD PTR tv75[ebp], edx
	cmp	DWORD PTR tv75[ebp], 4
	ja	$LN19@ffi_raw_ca
	mov	eax, DWORD PTR tv75[ebp]
	jmp	DWORD PTR $LN21@ffi_raw_ca[eax*4]
$LN13@ffi_raw_ca:
; Line 822
	mov	ecx, DWORD PTR _fn$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ecif$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	eax, DWORD PTR _ecif$[ebp]
	push	eax
	push	OFFSET _ffi_prep_args_raw
	call	_ffi_call_win32
	add	esp, 28					; 0000001cH
; Line 823
	jmp	$LN19@ffi_raw_ca
$LN12@ffi_raw_ca:
; Line 827
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _abi$4[ebp], edx
; Line 828
	mov	DWORD PTR _passed_regs$3[ebp], 0
; Line 830
	mov	eax, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [eax+20], 13			; 0000000dH
	jne	SHORT $LN11@ffi_raw_ca
; Line 831
	mov	ecx, DWORD PTR _passed_regs$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _passed_regs$3[ebp], ecx
$LN11@ffi_raw_ca:
; Line 833
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN10@ffi_raw_ca
$LN9@ffi_raw_ca:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN10@ffi_raw_ca:
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR _i$2[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN8@ffi_raw_ca
	cmp	DWORD PTR _passed_regs$3[ebp], 2
	jae	SHORT $LN8@ffi_raw_ca
; Line 838
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	movzx	eax, WORD PTR [edx+6]
	cmp	eax, 2
	je	SHORT $LN6@ffi_raw_ca
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	movzx	edx, WORD PTR [ecx+6]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN7@ffi_raw_ca
$LN6@ffi_raw_ca:
; Line 839
	jmp	SHORT $LN9@ffi_raw_ca
$LN7@ffi_raw_ca:
; Line 840
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 3
	and	ecx, -4					; fffffffcH
	mov	DWORD PTR _sz$1[ebp], ecx
; Line 841
	je	SHORT $LN4@ffi_raw_ca
	cmp	DWORD PTR _sz$1[ebp], 4
	jbe	SHORT $LN5@ffi_raw_ca
$LN4@ffi_raw_ca:
; Line 842
	jmp	SHORT $LN9@ffi_raw_ca
$LN5@ffi_raw_ca:
; Line 843
	mov	edx, DWORD PTR _passed_regs$3[ebp]
	add	edx, 1
	mov	DWORD PTR _passed_regs$3[ebp], edx
; Line 844
	jmp	SHORT $LN9@ffi_raw_ca
$LN8@ffi_raw_ca:
; Line 845
	cmp	DWORD PTR _passed_regs$3[ebp], 2
	jae	SHORT $LN3@ffi_raw_ca
	cmp	DWORD PTR _abi$4[ebp], 4
	jne	SHORT $LN3@ffi_raw_ca
; Line 846
	mov	DWORD PTR _abi$4[ebp], 3
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR _abi$4[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@ffi_raw_ca:
; Line 847
	cmp	DWORD PTR _passed_regs$3[ebp], 1
	jae	SHORT $LN2@ffi_raw_ca
	cmp	DWORD PTR _abi$4[ebp], 3
	jne	SHORT $LN2@ffi_raw_ca
; Line 848
	mov	DWORD PTR _abi$4[ebp], 2
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR _abi$4[ebp]
	mov	DWORD PTR [edx], eax
$LN2@ffi_raw_ca:
; Line 850
	mov	ecx, DWORD PTR _fn$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ecif$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _abi$4[ebp]
	push	ecx
	lea	edx, DWORD PTR _ecif$[ebp]
	push	edx
	push	OFFSET _ffi_prep_args_raw
	call	_ffi_call_win32
	add	esp, 28					; 0000001cH
$LN19@ffi_raw_ca:
; Line 863
	lea	esp, DWORD PTR [ebp-44]
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN21@ffi_raw_ca:
	DD	$LN13@ffi_raw_ca
	DD	$LN13@ffi_raw_ca
	DD	$LN12@ffi_raw_ca
	DD	$LN12@ffi_raw_ca
	DD	$LN13@ffi_raw_ca
_ffi_raw_call ENDP
_TEXT	ENDS
END
